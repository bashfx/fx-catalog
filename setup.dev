#!/usr/bin/env bash

# note: FXI_ prefix implies setup variables formerly known as FX_INIT_*
# note: sourcing include.sh automatically includes stderr.sh


#===============================================================================

#-------------------------------------------------------------------------------

# source "./setup.conf"; <--configurations would go here
if [ -n "$NO_COLOR" ]; then
  _red=
  _blue=
  _gold=
  _green=
  _reset=
else
  _red="\x1B[31m";
  _blue="\x1B[38;5;39m";
  _gold="\x1B[38;5;220m";
  _grey="\x1B[90m";
  _green="\x1B[32m";
  _reset="\x1B[0m";
fi
#-------------------------------------------------------------------------------

# Finds the user's canonical shell profile file (.profile or .bash_profile).
# It resolves symlinks to find the true file path.
fxi_canonical_profile() {
  local BASH_PROFILE

  # Prefer .profile if it exists (as any file type, including symlink),
  # otherwise fall back to .bash_profile.
  if [ -e "$HOME/.profile" ]; then
    BASH_PROFILE="$HOME/.profile"
  else
    BASH_PROFILE="$HOME/.bash_profile"
  fi

  # Resolve symlinks to find the actual file path.
  if command -v realpath >/dev/null 2>&1; then
    # Use the native, reliable tool if it exists.
    BASH_PROFILE=$(realpath "$BASH_PROFILE")
  elif [ -L "$BASH_PROFILE" ]; then
    # Use a pure-bash fallback if realpath is not available.
    # This loop handles nested symlinks (link to a link).
    local current_path="$BASH_PROFILE"
    local i=0
    while [ -L "$current_path" ] && [ "$i" -lt 10 ]; do
      local target
      target=$(readlink "$current_path")
      # If the link is relative, resolve it against its directory
      [[ "$target" != /* ]] && target="$(dirname "$current_path")/$target"
      current_path="$target"
      ((i++))
    done
    BASH_PROFILE="$current_path"
  fi

  echo "$BASH_PROFILE"
}

#-------------------------------------------------------------------------------


# Generates the .fxsetuprc file with dynamic paths and helper aliases.
# This file establishes the initial development environment.
# @param $1 - The absolute path where the RC file should be created.
fxi_setuprc(){
  local src=$1;
  [ -z $src ] && return 1;
cat > "$src" << EOF
#!/usr/bin/env bash

  export FXI_SETUP_RC="$src";
  export FXI_ROOT_DIR="$FXI_ROOT_DIR";
  export FXI_BIN_DIR="\$FXI_ROOT_DIR/bin";
  export FXI_PKG_DIR="\$FXI_ROOT_DIR/pkgs";
  export FXI_INC_DIR="\$FXI_ROOT_DIR/pkgs/inc";

  if [[ ":\$PATH:" != *":\$FXI_BIN_DIR:"* ]]; then
    export PATH="\$PATH:\$FXI_BIN_DIR"
    printf "... added BashFX (fx) project bin to path\n";
  fi

  # helper aliases
  alias fxi="devfx";
  alias fxinstall="fxi install";
  alias fxsetup="source $FXI_ROOT_DIR/setup.dev";
  alias fxdel="fxsetup reset";
  alias fxhelp="fxi help";
  alias fxundef="fxsetup unfunc";
  [[ -z "\$FXI_STAT"  ]] && fxsetup;

EOF

  [ -f "$src" ] && return 0;
  return 1;
}
#-------------------------------------------------------------------------------


# Dumps the content of the existing .fxsetuprc file to stdout.
fxi_setuprc_dump(){
  if [ -f "$FXI_SETUP_RC" ]; then
    cat "$FXI_SETUP_RC";
    return 0;
  else
    printf "${_red}Error loading generated RC file (%s)\n${_reset}" "$FXI_SETUP_RC";
  fi
}

#-------------------------------------------------------------------------------

# Checks if the user's profile file contains the source line for .fxsetuprc.
fxi_has_link(){
  local _line="source \"$FXI_SETUP_RC\";";
  grep -qF "$_line" "$PROFILE";
}

#-------------------------------------------------------------------------------


# Checks if the setup is complete (i.e., the RC file exists and is linked).
fxi_ready(){
  if fxi_has_link; then
    [ -f "$FXI_SETUP_RC" ] && return 0;  
  fi
  return 1;
}

#-------------------------------------------------------------------------------

# Initializes the development environment by creating the .fxsetuprc file
# and linking it to the user's profile.
fxi_init(){
  printf "${_green}BashFX setup ...${_reset}\n";

  local res ret _line; 
  

  # Use a pre-defined FXI_ROOT_DIR for testing, otherwise calculate it.
  export FXI_ROOT_DIR="${FXI_ROOT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")}"
  FXI_SETUP_RC="${FXI_ROOT_DIR}/.fxsetuprc";

  fxi_setuprc "$FXI_SETUP_RC"; ret=$?;
  
  if [ $ret -eq 0 ]; then
    _line="source \"$FXI_SETUP_RC\";"
    grep -qF "$_line" "$PROFILE" || echo "$_line" >> "$PROFILE";

    #load vars defined in .fxsetuprc
    if [ -f "$FXI_SETUP_RC" ]; then
      FXI_STAT='start';source "$FXI_SETUP_RC";
      printf "${_green}Done...${_reset}\n";
      fxi_next
      return 0;
    else
      printf "${_red}Error loading generated RC file (%s)\n${_reset}" "$FXI_SETUP_RC";
    fi
  else
    printf "${_red}Error creating RC file (%s)\n${_reset}" "$FXI_SETUP_RC";
  fi

  return 1;
}

#-------------------------------------------------------------------------------


# Removes the development environment setup by deleting the .fxsetuprc file,
# removing the source line from the profile, and unsetting env vars/aliases.
fxi_uninstall(){
  local _line _profile_tmp;
  printf "${_red}Removing BashFX setup ...${_reset}\n";

  # Make the uninstall process stateless by determining paths independently,
  # just like fxi_init does. This makes it robust even if .fxsetuprc is missing.
  export FXI_ROOT_DIR="${FXI_ROOT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")}"
  FXI_SETUP_RC="${FXI_ROOT_DIR}/.fxsetuprc"

  _line="source \"$FXI_SETUP_RC\";"
  _profile_tmp="${PROFILE}.tmp.$$" # Use PID for a unique temp file name
  # Use a temp file for sed for maximum portability and safety.
  if sed "\|^${_line}$|d" "$PROFILE" > "$_profile_tmp" && mv "$_profile_tmp" "$PROFILE"; then
    : # Successfully removed line
  else
    printf "${_red}Warning: could not modify profile file at %s${_reset}\n" "$PROFILE"
    rm -f "$_profile_tmp" # Clean up temp file on failure
  fi

  # Use robust `while read` loops to unset shell state
  env | grep '^FX' | cut -d= -f1 | while read -r f; do unset "$f"; done
  #declare -F | awk '/^declare -f fxi_/ {print $3}' | while read -r f; do unset -f "$f"; done
  fxi_clean_funcs
  unset _red _blue _green _reset;
  fxi_clean_alias

  if [ -f "$FXI_SETUP_RC" ]; then
    rm "$FXI_SETUP_RC";
  fi
  printf "${_green}Uninstall complete.${_reset}\n";
};

fxi_clean_funcs(){
  declare -F | awk '/^declare -f fxi_/ {print $3}' | while read -r f; do unset -f "$f"; done
}

fxi_clean_alias(){
  alias | grep '^alias fx' | cut -d' ' -f2 | cut -d= -f1 | while read -r f; do unalias "$f" 2>/dev/null; done
}

#-------------------------------------------------------------------------------

# Displays status and contextual next steps to the user, guiding them on
# how to proceed with setup or use the available aliases.
fxi_next(){
  if fxi_ready; then
    printf "\nBashFX (fx) is ready for installation!\n";
    printf "Use [${_blue}fxinstall${_reset}] to complete. \n\n";
    printf "${_grey}Additional Command aliases: \n\n${_reset}";
    printf "${_green}fxdel${_reset}  : remove/uninstall BashFX setup. \n";
    printf "${_green}fxhelp${_reset} : see more commands. \n";
    printf "${_green}fxi${_reset}    : advanced/dev utils. \n";
    printf "${_green}fxundef${_reset}: advanced/dev utils. \n";
  else 
    printf "\nRun '${_blue}source setup.dev init${_reset}' in the project root to setup BashFX.\n\n${_grey}Other commands: 'init reset check link rc'${_reset}";
  fi
}

#-------------------------------------------------------------------------------

# Main entry point and command dispatcher for the script.
# It parses arguments and calls the appropriate setup/utility function.
fxi_main(){
  local arg FXI_STAT;

  PROFILE=$(fxi_canonical_profile);

  if [ ! -f "$PROFILE" ]; then
    printf "${_red}Error! canonical bash profile missing (path: %s)\n${_reset}" "$PROFILE";
    return 1;
  fi


  if [ "$#" -eq 0 ]; then
    fxi_next;
    return 0;
  fi

  if [ -f "$FXI_SETUP_RC" ]; then
    :
    # FXI_STAT='reload'; source "$FXI_SETUP_RC";
  fi

  arg="${1:-}" # Use first argument or empty string if not set

  case "$arg" in
    (res|reset) fxi_uninstall; return 0;;
    (rc)        fxi_setuprc; return 0;;
    (check)     fxi_next; return 0;;
    (link)      fxi_has_link; return 0;;
    (unfunc)    fxi_clean_links; return 0;; #nuke any lingering function names
    (dumprc)    fxi_setuprc_dump; return 0;;
    (init)      fxi_init; return 0;;
    ("")        # Already handled by the check for $# -eq 0
                return 0;;
    (*)         printf "${_red}Unknown command (%s)${_reset}\n" "$arg"; return 1;;
  esac
}



# If FXI_TEST_MODE is not set, run the script's main logic and cleanup.
# This allows a test harness to source this script to load the functions
# without executing them immediately.
if [ -z "$FXI_TEST_MODE" ]; then
  fxi_main "$@"
  # cleanup
  fxi_clean_funcs;
  unset -f "fxi_clean_links";
  unset _red _blue _green _reset _gold FXI_STAT
fi
