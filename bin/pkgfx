#!/usr/bin/env bash
#===============================================================================
#$ name: pkgfx
#$ desc: BashFX Package Manager
#$ author: Shebang
#$ semver: 0.2.0
#===============================================================================

# --- Bootstrap & Core Includes ---

  # @ top
  SELF="APP_PKGFX";
  SELF_ARGS=("${@}");

  readonly APP_PKGFX="${BASH_SOURCE[0]}";
  readonly SELF_PATH="$0";

  _is_dir(){ [ -n "$1" ] && [ -d "$1" ]; }

  if _is_dir "$FX_INC_DIR"; then
    _inc="$FX_INC_DIR";
    _app="$FX_APP_DIR";
  elif _is_dir "$FXI_INC_DIR"; then
    _inc="$FXI_INC_DIR";
    _app="$FXI_APP_DIR";
  else
    printf "[ENV] Can't locate [include] directory. Fatal.\n" >&2;
    exit 1;
  fi

  source "$_inc/base.sh";

  if is_base_ready; then
    fx_smart_source stdfx     || exit 1;
    fx_smart_source stdutils  || exit 1;
    fx_smart_source stderr    || exit 1;
    fx_smart_source paths     || exit 1;
    fx_smart_source package   || exit 1;
    fx_smart_source manifest  || exit 1;
    fx_smart_source integrity || exit 1;
    fx_smart_source pkglinker || exit 1;
  else
    error "Problem loading core libraries";
    exit 1;
  fi

  boot "$SELF" "SELF";

  # --- Script-specific Globals ---
  opt_installed=1; # Default to off. Set to 0 by the options hook if --installed is present.


#-------------------------------------------------------------------------------
# System Funcs
#-------------------------------------------------------------------------------
  

# --- Options Hook ---

  # Hook for stdopts.sh to add pkgfx-specific flags. The name is important.
  pkgfx_post_options() {
    # The _options function passes all arguments to the hook.
    # We need to loop through them to find our script-specific flag.
    local arg;
    for arg in "$@"; do
      case "$arg" in
        --installed|-i)
          opt_installed=0;
          # We don't need to remove the arg here, the main entry point will filter all flags.
          ;;
      esac
    done
    return 0;
  }


#-------------------------------------------------------------------------------
# System Funcs
#-------------------------------------------------------------------------------
  

# --- Dispatch ---

  dispatch(){
    local cmd="$1";
    shift;

    case "$cmd" in
      list)
        if [ "$opt_installed" -eq 0 ]; then
          do_list_installed_pkgs "$@";
        else
          do_list_available_pkgs "$@";
        fi
        ;;
      check)          do_check_pkg "$@" ;;
      install)        do_install_pkg "$@" ;;
      uninstall)      do_uninstall_pkg "$@" ;;
      verify)         fx_integrity_verify_all "$@" ;;
      link)           fx_pkglinker_link_by_alias "$@" ;;
      unlink)         fx_pkglinker_unlink_by_alias "$@" ;;
      clear-manifest) fx_manifest_clear "$@" ;;
      help|-h|--help) usage "$@" ;;
      noop)           noop;;
      "")             usage >&2; return 1 ;;
      *)              error "Unknown command: '$cmd'"; usage >&2; return 1 ;;
    esac
    return $?;
  }

# --- Main ---

  main(){
    # The _boot_session from devfx should be called here if we need to initialize XDG
    # The F007 driver calls init_fx and ensure_fx_ready, so we don't need it for the test
    # but a standalone run would require it.
    # For now, we rely on the calling environment.

    dispatch "$@";
    return $?;
  }

# --- Usage ---

  usage(){
    cat << EOF >&2
  ${b}PKGFX [command] [options] ${x}

  ${w2}[ Commands ]${x}

  ${o}list [--installed] [group.pkg]${x} - List available or installed packages.
  ${o}check <pkg_id>${x}   - Validate if a package exists in the source repository.
  ${o}install <pkg_id>${x} - Install a package (copies files, creates symlink).
  ${o}uninstall <pkg_id>${x} - Uninstall a package (removes files, symlink, and manifest entry).
  ${o}verify${x}           - Verify the integrity of all installed packages.
  ${o}link <alias>${x}     - Create a symlink for an installed package's executable.
  ${o}unlink <alias>${x}   - Remove a symlink for an installed package's executable.
  ${o}clear-manifest${x}  - Clear all entries from the package manifest.

  ${w2}[ Flags ]${x}

  ${o}${ff} [-d] debug${x}, ${o}${ff} [-t] trace${x}, ${o}${ff} [-q] quiet${x}, ${o}${ff} [-y] yes${x}, ${o}${ff} [-f] force${x}, ${o}${ff} [-D] dev${x}
  ${o}${ff} [--installed|-i]${x} - Used with 'list' to show only installed packages.
EOF
  }

# --- Entry Point ---

  if [ "$0" = "-bash" ]; then
    :
  else

    # options is called by boot now

    # Filter out flags to get positional arguments for main().
    args=()
    for arg in "${SELF_ARGS[@]}"; do
      [[ "$arg" == -* ]] && continue;
      args+=("$arg");
    done

    main "${args[@]}";

  fi
